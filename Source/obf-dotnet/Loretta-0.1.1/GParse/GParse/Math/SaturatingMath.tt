<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    String minMaxHeader = @"if ( max < min )
                throw new InvalidOperationException ( ""Cannot have a maximum value smaller than the minimum value."" );";
#>
using System;
using System.Runtime.CompilerServices;

namespace GParse.Math
{
    /// <summary>
    ///    The saturating math class.
    /// Implements all fundamental arithmetic operations with saturating logic.
    /// </summary>
    public class SaturatingMath
    {<#foreach(String type in new[]{ "Int32", "Int64" }){
String funcArgs = $"{type} lhs, {type} rhs, {type} min, {type} max";#>

        #region <#=type#>

        #region Overflow/Underflow checks

        /// <summary>
        ///    Whether the addition of these elements will overflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillAdditionOverflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs > 0 && lhs >= max - rhs /* ∧ rhs > 0 */;
        }

        /// <summary>
        ///    Whether the addition of these elements will underflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillAdditionUnderflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs < 0 && lhs <= min - rhs /* ∧ rhs < 0 */;
        }

        /// <summary>
        ///    Whether the subtraction of these elements will overflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillSubtractionOverflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs > 0 && lhs >= max + rhs /* ∧ rhs < 0 */;
        }

        /// <summary>
        ///    Whether the subtraction of these elements will underflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillSubtractionUnderflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs < 0 && lhs <= min + rhs /* ∧ rhs > 0 */;
        }

        /// <summary>
        ///    Whether the multiplication of these elements will overflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillMultiplicationOverflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs != 0 && lhs >= max / rhs;
        }

        /// <summary>
        ///    Whether the multiplication of these elements will underflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillMultiplicationUnderflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs != 0 && lhs <= min / rhs;
        }

        /// <summary>
        ///    Whether the division of these elements will overflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillDivisionOverflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs != 0 && lhs >= max * rhs;
        }

        /// <summary>
        ///    Whether the division of these elements will underflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillDivisionUnderflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs != 0 && lhs <= min * rhs;
        }

        #endregion Overflow/Underflow checks

        #region Math operations

        /// <summary>
        ///    Adds both elements
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Add ( <#=funcArgs#> )
        {
            if ( WillAdditionOverflow ( lhs, rhs, min, max ) )
                return max;
            else if ( WillAdditionUnderflow ( lhs, rhs, min, max ) )
                return min;
            else
                return lhs + rhs;
        }

        /// <summary>
        ///    Subtracts both elements
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Subtract ( <#=funcArgs#> )
        {
            if ( WillSubtractionOverflow ( lhs, rhs, min, max ) )
                return max;
            else if ( WillSubtractionUnderflow ( lhs, rhs, min, max ) )
                return min;
            else
                return lhs - rhs;
        }

        /// <summary>
        ///    Multiplies both elements
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Multiply ( <#=funcArgs#> )
        {
            if ( WillMultiplicationOverflow ( lhs, rhs, min, max ) )
                return max;
            else if ( WillMultiplicationUnderflow ( lhs, rhs, min, max ) )
                return min;
            else
                return lhs * rhs;
        }

        /// <summary>
        ///    Divides both elements
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Divide ( <#=funcArgs#> )
        {
            if ( WillDivisionOverflow ( lhs, rhs, min, max ) )
                return max;
            else if ( WillDivisionUnderflow ( lhs, rhs, min, max ) )
                return min;
            else
                return lhs / rhs;
        }

        #endregion Math operations

        #endregion <#=type#>
<#
}
foreach(String type in new[]{"UInt32", "UInt64"}){
String funcArgs = $"{type} lhs, {type} rhs, {type} min, {type} max";
String shortFuncArgs = $"{type} lhs, {type} rhs";#>

        #region <#=type#>

        #region Overflow/Underflow check

        /// <summary>
        ///    Whether the addition of these elements will overflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillAdditionOverflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs != 0 && lhs >= max - rhs /* ∧ rhs > 0 */;
        }

        /// <summary>
        ///    Whether the subtraction of these elements will overflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillSubtractionUnderflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs != 0 && lhs <= min + rhs /* ∧ rhs > 0 */;
        }

        /// <summary>
        ///    Whether the multiplication of these elements will overflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillMultiplicationOverflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs != 0 && lhs >= max / rhs;
        }

        /// <summary>
        ///    Whether the division of these elements will underflow
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static Boolean WillDivisionUnderflow ( <#=funcArgs#> )
        {
            <#=minMaxHeader#>

            return lhs != 0 && rhs != 0 && lhs <= min * rhs;
        }

        #endregion Overflow/Underflow check

        #region Math operations

        /// <summary>
        /// Adds both elements with the lower bound being <see cref="<#=type#>.MinValue" /> and
        /// the upper bound being <see cref="<#=type#>.MaxValue" />. This is a branchless optimized
        /// implementation.
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Add ( <#=shortFuncArgs#> )
        {
            // Algorithm from: https://web.archive.org/web/20190213215419/https://locklessinc.com/articles/sat_arithmetic/
            unchecked
            {
                var res = lhs + rhs;
                var check = res < lhs;
                unsafe
                {
                    res |= ( <#=type#> ) ( -*( Byte* ) &check );
                }
                return res;
            }
        }

        /// <summary>
        /// Adds both elements
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Add ( <#=funcArgs#> )
        {
            if ( WillAdditionOverflow ( lhs, rhs, min, max ) )
                return max;
            else
                return lhs + rhs;
        }

        /// <summary>
        /// Subtracts both elements with the lower bound being <see cref="<#=type#>.MinValue" /> and
        /// the upper bound being <see cref="<#=type#>.MaxValue" />. This is a branchless optimized
        /// implementation.
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Subtract ( <#=shortFuncArgs#> )
        {
            // Algorithm from: https://web.archive.org/web/20190213215419/https://locklessinc.com/articles/sat_arithmetic/
            unchecked
            {
                var res = lhs - rhs;
                var check = res <= lhs;
                unsafe
                {
                    res &= ( <#=type#> ) ( -*( Byte* ) &check );
                }
                return res;
            }
        }

        /// <summary>
        /// Subtracts both elements
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Subtract ( <#=funcArgs#> )
        {
            if ( WillSubtractionUnderflow ( lhs, rhs, min, max ) )
                return min;
            else
                return lhs - rhs;
        }

<#if ( type == "UInt32" ) {#>
        /// <summary>
        /// Multiplies both elements with the lower bound being <see cref="<#=type#>.MinValue" /> and
        /// the upper bound being <see cref="<#=type#>.MaxValue" />. This is a branchless optimized
        /// implementation.
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Multiply ( <#=shortFuncArgs#> )
        {
            // Algorithm from: https://web.archive.org/web/20190213215419/https://locklessinc.com/articles/sat_arithmetic/
            unchecked
            {
                var res = ( UInt64 ) lhs * rhs;
                var hi = ( UInt32 ) ( res >> 32 );
                var lo = ( UInt32 ) res;
                var check = hi == 0;
                unsafe
                {
                    return lo | ( UInt32 ) ( -*( Byte* ) &check );
                }
            }
        }
<#}#>

        /// <summary>
        /// Multiplies both elements
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Multiply ( <#=funcArgs#> )
        {
            if ( WillMultiplicationOverflow ( lhs, rhs, min, max ) )
                return max;
            else
                return lhs * rhs;
        }

        /// <summary>
        /// Divides both elements with the lower bound being <see cref="<#=type#>.MinValue" /> and
        /// the upper bound being <see cref="<#=type#>.MaxValue" />. This is a branchless optimized
        /// implementation.
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Divide ( <#=shortFuncArgs#> ) =>
            lhs / rhs;

        /// <summary>
        /// Divides both elements
        /// </summary>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        /// <param name="min"></param>
        /// <param name="max"></param>
        [MethodImpl ( MethodImplOptions.AggressiveInlining )]
        public static <#=type#> Divide ( <#=funcArgs#> )
        {
            if ( WillDivisionUnderflow ( lhs, rhs, min, max ) )
                return min;
            else
                return lhs / rhs;
        }

        #endregion Math operations

        #endregion <#=type#>
<#}#>
    }
}
